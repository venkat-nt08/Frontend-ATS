name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      #  Step 1: Checkout + Setup Node + Install dependencies + Build
      - name: Build Frontend
        uses: actions/setup-node@v4
        with:
          node-version: 18
        run: |
          echo "🛠️ Setting up Node and building project..."
          npm ci
          echo "${{ secrets.FRONTEND_ENV }}" > .env
          npm run build

      #  Step 2: Prepare EC2 (ensure nginx + target directory)
      - name: Prepare EC2 Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt update -y
            sudo apt install nginx -y
            sudo systemctl enable nginx
            sudo mkdir -p /var/www/Elden-ATS/Frontend-ATS/dist
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS
            echo " EC2 ready for deployment"

      #  Step 3: Deploy Build Files
      - name: Deploy Build to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "dist/"
          target: "/var/www/Elden-ATS/Frontend-ATS/"
          overwrite: true

      #  Step 4: Finalize (permissions + reload nginx)
      - name: Finalize Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo chown -R www-data:www-data /var/www/Elden-ATS/Frontend-ATS/dist
            sudo chmod -R 755 /var/www/Elden-ATS/Frontend-ATS/dist
            sudo nginx -t && sudo systemctl reload nginx
            echo "🚀 Deployment complete!"

